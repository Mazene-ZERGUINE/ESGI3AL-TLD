
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandnonassocEQUALSSUPleftPLUSMINUSleftTIMESDIVIDEDIVIDE EQUALS IF INFF ISEQUAL LPAREN MINUS NAME NOTEQUAL NUMBER PLUS PRINT RPAREN SEMI SUP TIMES and orstart : bloc bloc : bloc statement\n    | statementstatement : NAME EQUALS expression SEMI  statement : PRINT LPAREN expression RPAREN SEMIexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression or expression\n                  | expression and expression\n                  | expression SUP expression\n                  | expression INFF expression\n                  | expression ISEQUAL expression\n                  | expression NOTEQUAL expression\n                  expression : MINUS expression expression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,2,3,6,7,8,11,12,15,16,17,18,19,20,21,22,23,24,25,40,],[4,4,-3,-2,9,9,9,9,-4,9,9,9,9,9,9,9,9,9,9,-5,]),'PRINT':([0,2,3,6,15,40,],[5,5,-3,-2,-4,-5,]),'$end':([1,2,3,6,15,40,],[0,-1,-3,-2,-4,-5,]),'EQUALS':([4,],[7,]),'LPAREN':([5,7,8,11,12,16,17,18,19,20,21,22,23,24,25,],[8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'MINUS':([7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,],[11,11,-19,17,11,11,-18,17,11,11,11,11,11,11,11,11,11,11,-16,17,-6,-7,-8,-9,17,17,17,17,17,17,-17,]),'NUMBER':([7,8,11,12,16,17,18,19,20,21,22,23,24,25,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'SEMI':([9,10,13,26,28,29,30,31,32,33,34,35,36,37,38,39,],[-19,15,-18,-16,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,]),'PLUS':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,16,-18,16,-16,16,-6,-7,-8,-9,16,16,16,16,16,16,-17,]),'TIMES':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,18,-18,18,18,18,18,18,-8,-9,18,18,18,18,18,18,-17,]),'DIVIDE':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,19,-18,19,19,19,19,19,-8,-9,19,19,19,19,19,19,-17,]),'or':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,20,-18,20,-16,20,-6,-7,-8,-9,-10,-11,-12,20,20,20,-17,]),'and':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,21,-18,21,-16,21,-6,-7,-8,-9,21,-11,-12,21,21,21,-17,]),'SUP':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,22,-18,22,-16,22,-6,-7,-8,-9,22,22,None,22,22,22,-17,]),'INFF':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,23,-18,23,-16,23,-6,-7,-8,-9,-10,-11,-12,23,23,23,-17,]),'ISEQUAL':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,24,-18,24,-16,24,-6,-7,-8,-9,-10,-11,-12,24,24,24,-17,]),'NOTEQUAL':([9,10,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,25,-18,25,-16,25,-6,-7,-8,-9,-10,-11,-12,25,25,25,-17,]),'RPAREN':([9,13,14,26,27,29,30,31,32,33,34,35,36,37,38,39,],[-19,-18,28,-16,39,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'bloc':([0,],[2,]),'statement':([0,2,],[3,6,]),'expression':([7,8,11,12,16,17,18,19,20,21,22,23,24,25,],[10,14,26,27,29,30,31,32,33,34,35,36,37,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> bloc','start',1,'p_start','calcMulrilignesVersAST.py',126),
  ('bloc -> bloc statement','bloc',2,'p_bloc','calcMulrilignesVersAST.py',133),
  ('bloc -> statement','bloc',1,'p_bloc','calcMulrilignesVersAST.py',134),
  ('statement -> NAME EQUALS expression SEMI','statement',4,'p_statement_assign','calcMulrilignesVersAST.py',142),
  ('statement -> PRINT LPAREN expression RPAREN SEMI','statement',5,'p_statement_print','calcMulrilignesVersAST.py',147),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',152),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',153),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',154),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',155),
  ('expression -> expression or expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',156),
  ('expression -> expression and expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',157),
  ('expression -> expression SUP expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',158),
  ('expression -> expression INFF expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',159),
  ('expression -> expression ISEQUAL expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',160),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binop','calcMulrilignesVersAST.py',161),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calcMulrilignesVersAST.py',167),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcMulrilignesVersAST.py',171),
  ('expression -> NUMBER','expression',1,'p_expression_number','calcMulrilignesVersAST.py',175),
  ('expression -> NAME','expression',1,'p_expression_name','calcMulrilignesVersAST.py',179),
]
